(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{211:function(t,e,n){"use strict";n.r(e);var r=n(28),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"host用户标记"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#host用户标记"}},[t._v("#")]),t._v(" Host用户标记")]),t._v(" "),n("p",[t._v("这里Host用户标记主要用来针对ws+ss的时候通过单端口来实现用户的内部分流用")]),t._v(" "),n("p",[t._v("这里获得的host值，填在ws设定中的Headers:{Host:获取的值}")]),t._v(" "),n("p",[t._v("需要配置如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('"mu_regex":  "%5m.%suffix", /5m 代表取前5个md5值\n"mu_suffix": "microsoft.com",\n')])])]),n("p",[t._v("函数定义如下:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func getMD5(data string) string {\n\tmd5Ctx := md5.New()\n\tmd5Ctx.Write([]byte(data))\n\tcipherStr := md5Ctx.Sum(nil)\n\tcurrent_md5 := hex.EncodeToString(cipherStr)\n\treturn current_md5\n}\nmd5:= getMD5(fmt.Sprintf("%s%s%s", user.Email, user.Passwd, user.Method))\nfunc getMuHost(md5 string, MU_REGEX string, MU_SUFFIX string) string {\n\tregex_text := MU_REGEX\n\tregex_text = strings.Replace(regex_text, "%suffix", MU_SUFFIX, -1)\n\tregex := regexp.MustCompile(`%-?[1-9]\\d*m`)\n\tfor _, item := range regex.FindAllString(regex_text, -1) {\n\t\tregex_num := strings.Replace(item, "%", "", -1)\n\t\tregex_num = strings.Replace(regex_num, "m", "", -1)\n\t\tmd5_length, _ := strconv.ParseInt(regex_num, 10, 0)\n\t\tif md5_length < 0 {\n\t\t\tregex_text = strings.Replace(regex_text, item, md5[32+md5_length:], -1)\n\t\t} else {\n\t\t\tregex_text = strings.Replace(regex_text, item, md5[:md5_length], -1)\n\t\t}\n\t}\n\treturn regex_text\n}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);